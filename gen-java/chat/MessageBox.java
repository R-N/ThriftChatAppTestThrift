/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package chat;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-10-22")
public class MessageBox implements org.apache.thrift.TBase<MessageBox, MessageBox._Fields>, java.io.Serializable, Cloneable, Comparable<MessageBox> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MessageBox");

  private static final org.apache.thrift.protocol.TField CHATROOM_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("chatroomType", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField CHATROOM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("chatroomId", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField MESSAGES_FIELD_DESC = new org.apache.thrift.protocol.TField("messages", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField REVISION_FIELD_DESC = new org.apache.thrift.protocol.TField("revision", org.apache.thrift.protocol.TType.I64, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new MessageBoxStandardSchemeFactory());
    schemes.put(TupleScheme.class, new MessageBoxTupleSchemeFactory());
  }

  /**
   * 
   * @see ChatroomType
   */
  public ChatroomType chatroomType; // required
  public long chatroomId; // required
  public List<Message> messages; // required
  public long revision; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see ChatroomType
     */
    CHATROOM_TYPE((short)1, "chatroomType"),
    CHATROOM_ID((short)2, "chatroomId"),
    MESSAGES((short)3, "messages"),
    REVISION((short)4, "revision");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CHATROOM_TYPE
          return CHATROOM_TYPE;
        case 2: // CHATROOM_ID
          return CHATROOM_ID;
        case 3: // MESSAGES
          return MESSAGES;
        case 4: // REVISION
          return REVISION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CHATROOMID_ISSET_ID = 0;
  private static final int __REVISION_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CHATROOM_TYPE, new org.apache.thrift.meta_data.FieldMetaData("chatroomType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ChatroomType.class)));
    tmpMap.put(_Fields.CHATROOM_ID, new org.apache.thrift.meta_data.FieldMetaData("chatroomId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MESSAGES, new org.apache.thrift.meta_data.FieldMetaData("messages", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Message.class))));
    tmpMap.put(_Fields.REVISION, new org.apache.thrift.meta_data.FieldMetaData("revision", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MessageBox.class, metaDataMap);
  }

  public MessageBox() {
  }

  public MessageBox(
    ChatroomType chatroomType,
    long chatroomId,
    List<Message> messages,
    long revision)
  {
    this();
    this.chatroomType = chatroomType;
    this.chatroomId = chatroomId;
    setChatroomIdIsSet(true);
    this.messages = messages;
    this.revision = revision;
    setRevisionIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MessageBox(MessageBox other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetChatroomType()) {
      this.chatroomType = other.chatroomType;
    }
    this.chatroomId = other.chatroomId;
    if (other.isSetMessages()) {
      List<Message> __this__messages = new ArrayList<Message>(other.messages.size());
      for (Message other_element : other.messages) {
        __this__messages.add(new Message(other_element));
      }
      this.messages = __this__messages;
    }
    this.revision = other.revision;
  }

  public MessageBox deepCopy() {
    return new MessageBox(this);
  }

  @Override
  public void clear() {
    this.chatroomType = null;
    setChatroomIdIsSet(false);
    this.chatroomId = 0;
    this.messages = null;
    setRevisionIsSet(false);
    this.revision = 0;
  }

  /**
   * 
   * @see ChatroomType
   */
  public ChatroomType getChatroomType() {
    return this.chatroomType;
  }

  /**
   * 
   * @see ChatroomType
   */
  public MessageBox setChatroomType(ChatroomType chatroomType) {
    this.chatroomType = chatroomType;
    return this;
  }

  public void unsetChatroomType() {
    this.chatroomType = null;
  }

  /** Returns true if field chatroomType is set (has been assigned a value) and false otherwise */
  public boolean isSetChatroomType() {
    return this.chatroomType != null;
  }

  public void setChatroomTypeIsSet(boolean value) {
    if (!value) {
      this.chatroomType = null;
    }
  }

  public long getChatroomId() {
    return this.chatroomId;
  }

  public MessageBox setChatroomId(long chatroomId) {
    this.chatroomId = chatroomId;
    setChatroomIdIsSet(true);
    return this;
  }

  public void unsetChatroomId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CHATROOMID_ISSET_ID);
  }

  /** Returns true if field chatroomId is set (has been assigned a value) and false otherwise */
  public boolean isSetChatroomId() {
    return EncodingUtils.testBit(__isset_bitfield, __CHATROOMID_ISSET_ID);
  }

  public void setChatroomIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CHATROOMID_ISSET_ID, value);
  }

  public int getMessagesSize() {
    return (this.messages == null) ? 0 : this.messages.size();
  }

  public java.util.Iterator<Message> getMessagesIterator() {
    return (this.messages == null) ? null : this.messages.iterator();
  }

  public void addToMessages(Message elem) {
    if (this.messages == null) {
      this.messages = new ArrayList<Message>();
    }
    this.messages.add(elem);
  }

  public List<Message> getMessages() {
    return this.messages;
  }

  public MessageBox setMessages(List<Message> messages) {
    this.messages = messages;
    return this;
  }

  public void unsetMessages() {
    this.messages = null;
  }

  /** Returns true if field messages is set (has been assigned a value) and false otherwise */
  public boolean isSetMessages() {
    return this.messages != null;
  }

  public void setMessagesIsSet(boolean value) {
    if (!value) {
      this.messages = null;
    }
  }

  public long getRevision() {
    return this.revision;
  }

  public MessageBox setRevision(long revision) {
    this.revision = revision;
    setRevisionIsSet(true);
    return this;
  }

  public void unsetRevision() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REVISION_ISSET_ID);
  }

  /** Returns true if field revision is set (has been assigned a value) and false otherwise */
  public boolean isSetRevision() {
    return EncodingUtils.testBit(__isset_bitfield, __REVISION_ISSET_ID);
  }

  public void setRevisionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REVISION_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CHATROOM_TYPE:
      if (value == null) {
        unsetChatroomType();
      } else {
        setChatroomType((ChatroomType)value);
      }
      break;

    case CHATROOM_ID:
      if (value == null) {
        unsetChatroomId();
      } else {
        setChatroomId((Long)value);
      }
      break;

    case MESSAGES:
      if (value == null) {
        unsetMessages();
      } else {
        setMessages((List<Message>)value);
      }
      break;

    case REVISION:
      if (value == null) {
        unsetRevision();
      } else {
        setRevision((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CHATROOM_TYPE:
      return getChatroomType();

    case CHATROOM_ID:
      return getChatroomId();

    case MESSAGES:
      return getMessages();

    case REVISION:
      return getRevision();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CHATROOM_TYPE:
      return isSetChatroomType();
    case CHATROOM_ID:
      return isSetChatroomId();
    case MESSAGES:
      return isSetMessages();
    case REVISION:
      return isSetRevision();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof MessageBox)
      return this.equals((MessageBox)that);
    return false;
  }

  public boolean equals(MessageBox that) {
    if (that == null)
      return false;

    boolean this_present_chatroomType = true && this.isSetChatroomType();
    boolean that_present_chatroomType = true && that.isSetChatroomType();
    if (this_present_chatroomType || that_present_chatroomType) {
      if (!(this_present_chatroomType && that_present_chatroomType))
        return false;
      if (!this.chatroomType.equals(that.chatroomType))
        return false;
    }

    boolean this_present_chatroomId = true;
    boolean that_present_chatroomId = true;
    if (this_present_chatroomId || that_present_chatroomId) {
      if (!(this_present_chatroomId && that_present_chatroomId))
        return false;
      if (this.chatroomId != that.chatroomId)
        return false;
    }

    boolean this_present_messages = true && this.isSetMessages();
    boolean that_present_messages = true && that.isSetMessages();
    if (this_present_messages || that_present_messages) {
      if (!(this_present_messages && that_present_messages))
        return false;
      if (!this.messages.equals(that.messages))
        return false;
    }

    boolean this_present_revision = true;
    boolean that_present_revision = true;
    if (this_present_revision || that_present_revision) {
      if (!(this_present_revision && that_present_revision))
        return false;
      if (this.revision != that.revision)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_chatroomType = true && (isSetChatroomType());
    list.add(present_chatroomType);
    if (present_chatroomType)
      list.add(chatroomType.getValue());

    boolean present_chatroomId = true;
    list.add(present_chatroomId);
    if (present_chatroomId)
      list.add(chatroomId);

    boolean present_messages = true && (isSetMessages());
    list.add(present_messages);
    if (present_messages)
      list.add(messages);

    boolean present_revision = true;
    list.add(present_revision);
    if (present_revision)
      list.add(revision);

    return list.hashCode();
  }

  @Override
  public int compareTo(MessageBox other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetChatroomType()).compareTo(other.isSetChatroomType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChatroomType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chatroomType, other.chatroomType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChatroomId()).compareTo(other.isSetChatroomId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChatroomId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chatroomId, other.chatroomId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMessages()).compareTo(other.isSetMessages());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMessages()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.messages, other.messages);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRevision()).compareTo(other.isSetRevision());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRevision()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.revision, other.revision);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("MessageBox(");
    boolean first = true;

    sb.append("chatroomType:");
    if (this.chatroomType == null) {
      sb.append("null");
    } else {
      sb.append(this.chatroomType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("chatroomId:");
    sb.append(this.chatroomId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("messages:");
    if (this.messages == null) {
      sb.append("null");
    } else {
      sb.append(this.messages);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("revision:");
    sb.append(this.revision);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MessageBoxStandardSchemeFactory implements SchemeFactory {
    public MessageBoxStandardScheme getScheme() {
      return new MessageBoxStandardScheme();
    }
  }

  private static class MessageBoxStandardScheme extends StandardScheme<MessageBox> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MessageBox struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CHATROOM_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.chatroomType = chat.ChatroomType.findByValue(iprot.readI32());
              struct.setChatroomTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CHATROOM_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.chatroomId = iprot.readI64();
              struct.setChatroomIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MESSAGES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                struct.messages = new ArrayList<Message>(_list16.size);
                Message _elem17;
                for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                {
                  _elem17 = new Message();
                  _elem17.read(iprot);
                  struct.messages.add(_elem17);
                }
                iprot.readListEnd();
              }
              struct.setMessagesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // REVISION
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.revision = iprot.readI64();
              struct.setRevisionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MessageBox struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.chatroomType != null) {
        oprot.writeFieldBegin(CHATROOM_TYPE_FIELD_DESC);
        oprot.writeI32(struct.chatroomType.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CHATROOM_ID_FIELD_DESC);
      oprot.writeI64(struct.chatroomId);
      oprot.writeFieldEnd();
      if (struct.messages != null) {
        oprot.writeFieldBegin(MESSAGES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.messages.size()));
          for (Message _iter19 : struct.messages)
          {
            _iter19.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(REVISION_FIELD_DESC);
      oprot.writeI64(struct.revision);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MessageBoxTupleSchemeFactory implements SchemeFactory {
    public MessageBoxTupleScheme getScheme() {
      return new MessageBoxTupleScheme();
    }
  }

  private static class MessageBoxTupleScheme extends TupleScheme<MessageBox> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MessageBox struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetChatroomType()) {
        optionals.set(0);
      }
      if (struct.isSetChatroomId()) {
        optionals.set(1);
      }
      if (struct.isSetMessages()) {
        optionals.set(2);
      }
      if (struct.isSetRevision()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetChatroomType()) {
        oprot.writeI32(struct.chatroomType.getValue());
      }
      if (struct.isSetChatroomId()) {
        oprot.writeI64(struct.chatroomId);
      }
      if (struct.isSetMessages()) {
        {
          oprot.writeI32(struct.messages.size());
          for (Message _iter20 : struct.messages)
          {
            _iter20.write(oprot);
          }
        }
      }
      if (struct.isSetRevision()) {
        oprot.writeI64(struct.revision);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MessageBox struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.chatroomType = chat.ChatroomType.findByValue(iprot.readI32());
        struct.setChatroomTypeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.chatroomId = iprot.readI64();
        struct.setChatroomIdIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.messages = new ArrayList<Message>(_list21.size);
          Message _elem22;
          for (int _i23 = 0; _i23 < _list21.size; ++_i23)
          {
            _elem22 = new Message();
            _elem22.read(iprot);
            struct.messages.add(_elem22);
          }
        }
        struct.setMessagesIsSet(true);
      }
      if (incoming.get(3)) {
        struct.revision = iprot.readI64();
        struct.setRevisionIsSet(true);
      }
    }
  }

}

